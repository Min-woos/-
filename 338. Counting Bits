// 문제: 숫자들의 2진 표현에서 1의 개수를 계산하는 프로그램 작성
class Solution {
  List<int> countBits(int n) {
    // 결과를 저장 할 리스트, 0으로 초기화
    List<int> result = List.filled(n + 1, 0);

    // 0부터 n까지의 숫자에 대해 1의 개수 계산
    for (int i = 1; i <= n; i++) {
        // i의 1의 개수는 (i >> 1)의 개수 + (i & 1)
        result[i] = result[i >> 1] + (i & 1);
    }
    return result;
  }
}
// Dynamic Programming 사용 : result[i]는 (i >> 1)의 결과에서 1의 개수를 가져오고, 여기에 (i & 1)을 더합니다.
// (i >> 1)는 숫자를 오른쪽으로 1비트 쉬프트하여 마지막 비트를 제외한 값을 얻습니다.
// (i & 1)는 현재 숫자의 마지막 비트(1인지 0인지)를 확인합니다.
// 리스트 초기화 : List.filled(n + 1, 0)로 결과 리스트를 초기화합니다. 이 리스트는 0부터 n까지 각 숫자에 대한 1의 개수를 저장합니다.
// 루프를 통한 계산 : 1부터 n까지 숫자를 순회하며 result 배열을 업데이트합니다.
